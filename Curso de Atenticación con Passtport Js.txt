REPOSITORIO DEL CURSO https://github.com/JasanHdz/passportjs/blob/master/notes/notes.md

Este curso es un complemento de la Escuela de JavaScript una carrera en la cual realizaremos un proyecto llamado Platzi Video. 
En este curso en específico nos dedicaremos a crear la capa de seguridad y autenticación.

STACK DE  SEGURIDAD MODERNO
 
Anteriormente las compañías se comunicaban mediante un intranet (intranet --> red privada que funciona dentro de las compañías)
dentro de intranet exístian protocolos como SOAP,XAM, WE federation, protocolos que fueron desfasados cuando llegó la revolución mobile
además tecnologías como html necesitaban herramientas mas avanzadas

El auge de los microservicios y la necesidad de tener multiples clientes hicieron necesario la crearción de un nuevo stack 

-------------------------Stack de seguridad moderno---------------------------
Este nuevo stack se componen de 3 protocolos

1. Json Web Tokens --> estandar de la industria abierta que nos permite comunicarnos entre dos clientes de manera mas segura
2. OAuth 2.0 --> estándar de la industria que permite implementar Autorización 
3. OpenID Connect --> capa de autenticación que funciona por encima de OpenAuth 2.0
======================================================================================================================================================
¿Qué es la autenticación y la autorización ?

Autenticación: verifica las identidades de los usuarios, por diferentes métodos (algo que sabemos, algo que tenemos, algo que somos), verifica si el usuario existe y se en realidad es el
las opciones mas comunes para hacer la autenticación es con el usuario y la contraseña

Autorización: verifica los permisos que corresponden a cada identidad. (Acción de otorgar permisos de manera limitada a nuestro recursos)
============================================================================================================================================================
INTRODUCCIÓN A LAS SESIONES 

http es un protocolo que no tiene estado, lo cual quiere decir que diferentes peticiones http no comparten informacion entre si, asi que la manera de compartir esta informacion entre peticiones es por medio de una sesion

Cuando visitamos un sitio por primera vez se crea una (petición http) sesión con los ajustes que se configuran (no es necesario ser autenticado para que esta sesion sea creada). Por ejemplo, en un sitio web de reserva de hoteles, a medida que buscamos y ponemos preferencias de precios y demás, 
éstas se irán guardando en dicha sesión. Y luego estos datos se convertirán en un ID que será almacenado en una cookie en tu navegador.

cookie --> archivo que se almacena en el navegador para que cuando se cierre el navegador la informacion de la sesion permanezca, para que el dia en que se vuelva a abrir la sesión la información de la sesión pasada se relacione
con la información de la nueva sesión, esto ayuda con el tema de las preferencias 

Cuando hay un proceso de autenticación la sesión y la información se almacenan directamente con el usuario

Por seguridad la sesión pasado un tiempo de inactividad debería de cerrarse, pero dependiendo de las configuraciones esta puede durar abierta incluso hasta meses

cookie sesion y express sesion son librerias que nos permiten implementar todo el tema de sesiones en express

cookie sesion --> nos permite almacenar la sesion en la cookie

express sesion --> nos permite almacenar la sesion en memoria en el lado del servidor

Json web tokens no posee estado y por ende no necesita memoria

=======================================================================================================================================
ANATOMÍA DE UN JSON WEB TOKEN (JWT)

JWT es un estándar de la industria que nos permite manejar demandas de información entre dos clientes de manera segura

Un JWT consta de 3 partes generalmente divididas por un punto

1.  header --> posee 2 atributos (tipo = "JWT" y el algoritmo de encriptacion de la firma)
    el algoritmo de la firma puede ser sincrono(usan la misma llave para encriptar y desencriptar) y asincrono 
    (estos ultimos usan 2 llaves de encriptacion una publica(usada para encriptar) y una privada (usada para desencriptar))

    Los algoritmos asincronos deben usarse donde partes publicas puedan tener acceso a la llave
    Los algoritmos sincronos solo deben usarse en sistemas como en el backend

2.  payload --> es donde guardamos la informacion del usuario
    El payload se componen de claims, los cuales son representado por 3 letras para mantener el JWT muy pequeño

    Registered Claim Names --> ya tiene una definición propia y deben respetarse
    Public Claim Names --> pueden usarse entre diferentes aplicaciones y ya estan definidos 
    PrivateClaim Names --> los definimos nosotros para la aplicacion

3.  signature --> esta compuesto del header y del payload ambas partes codificadas

========================================================================================================
Autenticación tradicional vs JWT

Cuando usamos una autenticación tradicional se crea una sesión y el ID de esa sesión se almacena en una cookie del navegador, 
pero cuando utilizamos JWT firmamos un token y este se guarda en el navegador el cual permite a una SPA actualizarse sin refrescar la ventana.


Autenticación tradicional -->   se crea una sesion y el id se guarda en las cookies,
problemas:
por definición la rest API no deberia tener estado pero con la sesion estamos generando estado
es poco escalable 
el control de acceso siempre requiere que vayamos a base de datos, 
el alto consumo de memoria, ya que cada cliente que ingrese genera mas consumo de memoria

Autenticación con JWT --> se firma un token, este es enviado al cliente y debe ser almacenado en memoria o una cookie, todos los request llevan este token, 

ventajas: 
es que la single page APpm ya no se requiere del backend para saber si el usuario esta autenticado, se pueden recibir varios requeste con el token pero lo unico que interesa es saber
si esta bien firmado
========================================================================================================================================================================================
FIRMANDO Y VERIFICANDO NUESTRO JWT

Para firmar nuestro token utilizaremos un paquete de node llamado jsonwebtoken y al usarlo en nuestro código se verá de esta manera:

jwt.sign({ sub: user.id }, 'secret', options);

El primer atributo que recibe es el payload o sea los datos que guardaremos en ese token. 

un payload esta compuesto por un conjunto de claims que definamos 
Cada claim es un fragmento de información sobre el usuario, como pueden ser, nombre de usuario, correo electrónico, rol, localidad a la que pertenece, etc. La forma más sencilla de crear un Claim es proporcionando un tipo y un valor en el constructor del Claim

De segundo atributo recibe una clave secreta con la cual será firmado y finalmente podremos pasarle opciones si es nuestro caso.

Para verificar nuestro token usamos la misma libreria y lo haremos de la siguiente manera:

jwt.verify(token, 'secret', function(err, decoded){});

Como primer atributo recibiremos el token que queremos verificar
Como segundo atributo el secreto (secret) de la firma 
como tercer argumento (opcional) recibe un callback que devolverá el JWT decodificado. 

primero crearemos una carpeta llamada jwt-utilities, luego desde la consola accedemos a ese directorio
e inicializamos npm para que se nos cree el pacakege.json

Luego detro de jwt-utilities creamos el archivo index.js 

Luego nos vamos a la consola a intalar nuestra dependecia de jsonwebtoken (npm install jsonwebtoken)
Una vez instalas nuestra dependencia podemos pasar trabajar al archivo index.js

==========================================================================================================================================================
SERVER SIDE  VS CLIENT SERVER SESSIONS

Sesiones del lado del servidor vs sesiones del lado del cliente
¿Qué es una sesión?
En terminos generales una sesion es una manera de preservar un estado deseado.

¿Qué es una sesion del lado del servidor?
La sesión en el lado del servidor suele ser una pieza de información que se guarda en memoria o en una base de datos y esta permite hacerle seguimiento a la información de autenticación, con el fin de identificar al usuario y determinar cuál es el estado de autenticación. Mantener la sesión de esta manera en el lado del servidor es lo que se considera “stateful”, es decir que maneja un estado.

¿Qué es una sesión del lado del cliente?
Las SPA (Single-page apps) requieren una manera de saber si el usuario esta autenticado o no. Pero esto no se puede hacer de una manera tradicional porque suelen ser muy desacopladas con el backend y no suelen refrescar la página como lo hacen las aplicaciones renderizadas en el servidor.

JWT (JSON Web Token) es un mecanismo de autenticación sin estado, lo que conocemos como “stateless”. Lo que significa que no hay una sesión que exista del lado del servidor.

La manera como se comporta la sesión del lado del cliente es:

Cuando el usuario hace “login” agregamos una bandera para indicar que lo esta.
En cualquier punto de la aplicación verificamos la expiración del token.
Si el token expira, cambiamos la bandera para indicar que el usuario no está logueado.
Se suele chequear cuando la ruta cambia.
Si el token expiró lo redireccionamos a la ruta de “login” y actualizamos el estado como “logout”.
Se actualiza la UI para mostrar que el usuario ha cerrado la sesión.

complementos
https://programacionymas.com/blog/jwt-vs-cookies-y-sesiones
https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/
https://medium.com/@rajaraodv/securing-react-redux-apps-with-jwt-tokens-fcfe81356ea0
https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback

===================================================================================================================================================================================
BUENAS PRACTICAS CON JWT

Buenas practicas con JSON Web token
En los últimos años se ha criticado fuertemente el uso de JSON Web Tokens como buena practica de seguridad.
La realidad es que muchas compañías hoy en día los usan sin ningún problema siguiendo unas buenas practicas de seguridad, que aseguran su uso sin ningún inconveniente.

A continuación listaremos unos consejos que se deben tener en cuenta:

Evitar almacenar información sensible
Debido a que los JSON Web tokens son decodificables es posible visualizar la información del payload, por lo que ningún tipo de información sensible debe ser expuesto 
como contraseñas, keys, etc. Tampoco debería agregarse información confidencial del usuario como su numero de identificación o información medica, ya que como hablamos anteriormente,
los hackers pueden usar esta información para hacer ingeniería social.

Mantener su peso lo más liviano posible
Suele tenerse la tentación de guardar toda la información del perfil en el payload del JWT, pero esto no debería hacerse ya que necesitamos que el JWT sea lo más pequeño posible 
debido a que al enviarse con todos los request estamos consumiendo parte del ancho de banda.

Establecer un tiempo de expiración corto
Debido a que los tokens pueden ser robados si no se toman las medidas correctas de almacenamiento seguro, es muy importante que estos tengan unas expiración corta, 
el tiempo recomendado es desde 15 minutos hasta un maximo de 2 horas.

Tratar los JWT como tokens opacos
Aunque los tokens se pueden decodificar, deben tratarse como tokens opacos, es decir como si no tuviesen ningún valor legible. 
Esto es porque desde el lado del cliente no tenemos manera de verificar si la firma es correcta, así que si confiamos en la información decodificada del token, 
alguien podría introducir un token invalido con otra información a propósito. Lo mejor, es siempre enviar el token del lado del servidor y hacer las verificaciones allí.

¿Donde guardar los tokens?
Cuando estamos trabajando con SPA (Single Page apps) debemos evitar almacenar los tokens en Local Storage o Session Storage. 
Estos deben ser almacenados en memoria o en una Cookie, pero solo de manera segura y con el flag httpOnly, esto quiere decir que la cookie debe venir del lado del servidor con el token almacenado. 
Más información: https://auth0.com/docs/security/store-tokens#single-page-apps

Silent authenticacion vs Refresh tokens

Debido a que es riesgoso almacenar tokens del lado del cliente, no se deberian usar Refresh Tokens cuando se trabaja solo con una SPA. 
Lo que se debe implementar es Silent Authentication, para ello se debe seguir el siguiente flujo:

1. La SPA obtiene un access token al hacer login o mediante cualquier flujo de OAuth.
2. Cuando el token expira el API retornara un error 401.
3. En este momento se debe detectar el error y hacer un request para obtener de nuevo un access token.
4. Si nuestro backend server tiene una sesión valida (Se puede usar una cookie) entonces respondemos con un nuevo access token.

Más información:
https://auth0.com/docs/api-auth/tutorials/silent-authentication
https://auth0.com/docs/tokens/refresh-token/current
Hay que tener en cuenta que para implementar Silent authentication y Refresh tokens, se require tener un tipo de sesión valida del lado del servidor por lo que en una SPA es posible que sea necesario una especie de backend-proxy, ya que la sesión no debería convivir en el lado del API server.

En el paso 2, si se esta usando alguna librería para manejo de estado como redux, se puede implementar un middleware que detecte este error y proceda con el paso 3.

Silent authenticacion nos ayuda a que el usuario no deba colocar sus credenciales cada que el token expire, sino que se “Empieza de nuevo” en términos simples. 
(El servidor envía un nuevo token al cliente, una vez el anterior haya expirado, este, se puede guardar en una blacklist para que el servidor recuerde no validarlo, en caso de un ataque)

=================================================================================================================================================================================================================================================
QUE SON LAS COOKIES QUE COMO IMPLEMENTAR EL MANEJO DE SESION

cookie --> es un archivo creado por un sitio web que tiene pequeños pedazos de datos almacenados en él. Su propósito es identificar al usuario mediante el almacenamiento de su historial.
cookie session --> son cookies que tienen un corto periodo de vida ya que son removidas cuando el navegador o la pestaña se cierran.
persistent cookies --> se usan generalmente para guardar información de interés para el usuario.
secure cookies --> almacenan datos de forma cifradas para que terceros no puedan tener acceso a ellas, se suelen usar en conexiones HTTPS (Conexiones seguras).

Hay leyes sobre cookies que debes seguir al pie de la letra:

1. Avisarle al usuario que estás haciendo uso de cookies en tu sitio para guardar información
2. Es necesario que el usuario de su consentimiento para manejar cookies en tu sitio

pero estas dos leyes tiene excepciones:

1. cuando las cookies son necesarias para la autenticación del usuario
2. cuando las cookies son necesarias para solventar algun problema de seguridad

cuando ocurran estos dos casos las leyes no se aplican

En nuestro proyecto de platzi video nosotros haremos uso de cookies para almacenar el uso de la sesion

Primero creamos una nueva carpeta llamada handle-session, en la consola accedemos a ese directorio y corremos npm init -y para inicializar nuestro proyecto 
y para que se nos cree el pacakege.json, esto lo hacemos para especificar cuales son las dependecias de nuestro proyecto

Luego de handle-sesion instalaremos unas dependecias 
npm install express express-session (nos permitirá hacer el manejo de sesion con cookies) 
npm install -D nodemon (nos permitirá correr nuestro proyecto de manera automática cuando detecte algun cambio)

Luego dentro de la carpeta handle-session creamos un archivo index.js y crearmos el archivo gitignore para no subir nuestras depencias que están en node_modules

En el archivo index.js creamos nuestra session con sus propiedades y nuestra app, ademas establecemos el request y el response y en que puerto escuchará nuestra aplicacion
luego de eso nos vamos a pacakege.json a crear 2 scripts nuevos

=====================================================================================================================================================================================
COOKIES VS SESSION STORAGE VS LOCAL STORAGE

Local storage 

* Tiene un almacenamiento de 5 mb max
* La información almacenada en el local storage no se va con cada request que hacemos al servidor lo cual nos ayuda a reducir la 
  informacion entre cliente y servidor
* La informacion almacenada en el local storage persiste aunque cerremos la ventana del navegador
* No se les puede establecer un tiempo de expiración, si se quiere establecer eso debe hacerce por medio de JavaScript

Session storage

* La informacion esta disponible por tab o por window, si cerramos un tab o un window la infomación deja de persistir
* Solo la informacion que almacenamos en cada tab esta disponible en ese tab
* No se les puede establecer un tiempo de expiración, si se quiere establecer eso debe hacerce por medio de JavaScript

cookies 
* Solo tienen un almacenamiento de 4 kb
* Se les puede establecer un tiempo de expiración
Desventaja de las cookies
* Por cada petición que se haga al servidor (img,html,etc) las cookies van adjuntas a la petición, esto
ocasiona un gran consumo de datos por cada petición 
Ventaja de las cookies
* Las cookies pueden hacerce seguras por medio de un flag (bandera) llamado htppOnly, lo cual permite que la información de la cookie
solo pueda ser accedida y modificada en el servidor

Cuando usar Cookies, Session Storage y Local Storage

* Para información no sencible (Local Storage, Session Storage)
* Para infomación medianamente sencible como nombre de usuario o algunos terminos que hagan posible identificar al usuario (Session Storage)
* Para información muy sencible como contraseñas o JWT (cookies pero con el flag hhtpOnly)

Comportamiento de Session Storage y Local Storage en el navegador

La manera en que podemos acceder al API de session storage es mediante la palabra sessionStorage la cual posee dos metodos
setItem()--> se puede especificar con que key quereos almacenar nuestra información

La manera en que podemos acceder al API de local storage es mediante la palabra localStorage la cual posee dos metodos
setItem()--> se puede especificar con que key quereos almacenar nuestra información

Vamos al navegador y en el inspector hacemos esto: 

sessionStorage.setItem('hello', 'Temporary world');
localStorage.setItem('hello', 'world');

Si queremos acceder a la información que hemos guardado en cada storage lo podemos hacer por medio del metod getItem y le pasamos el key con el cual guardamos la información

localStorage.getItem('hello'); --> R/ world
sessionStorage.getItem('hello); --> R/ Temporary world

Si luego de hacer las pruebas con local y session storage cerramos la ventana del navegador donde realizamos las pruebas y abrimos otra y nos vamos a revisar
el localStorage y el sessionStorage nos damos cuenta que lo que almacenamos en el localStorage persiste, sin embargo lo que anotamos en el sessionStorage ya no está
se borró en el momento en el que cerramos la pestaña

complementos
https://medium.com/@novenarii/cookies-local-storage-session-storage-f19cac2182ad
======================================================================================================================================================================================


